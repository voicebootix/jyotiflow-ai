"""
Test Bug Fixes - Comprehensive Validation Script
This script validates that all the critical bugs have been fixed
"""

import os
import sys
import ast

def test_conditional_variable_usage_fix():
    """Test that the conditional variable usage bug is fixed"""
    print("üîß Testing Conditional Variable Usage Fix...")
    
    try:
        with open('knowledge_seeding_system.py', 'r') as f:
            content = f.read()
            
        # Check if conn is properly initialized before use
        if 'conn = None' in content:
            print("‚úÖ conn variable properly initialized")
        else:
            print("‚ùå conn variable not properly initialized")
            return False
            
        # Check if conn is properly checked before closing
        if 'if conn:' in content and 'await conn.close()' in content:
            print("‚úÖ conn variable properly checked before closing")
        else:
            print("‚ùå conn variable not properly checked before closing")
            return False
            
        # Check if the try-finally block is properly structured
        if 'try:' in content and 'finally:' in content:
            print("‚úÖ try-finally block properly structured")
        else:
            print("‚ùå try-finally block not properly structured")
            return False
            
        print("‚úÖ Conditional variable usage fix is properly implemented")
        return True
        
    except FileNotFoundError:
        print("‚ùå knowledge_seeding_system.py not found")
        return False

def test_vector_extension_fix():
    """Test that the vector extension bug is fixed"""
    print("üîß Testing Vector Extension Fix...")
    
    try:
        with open('fix_startup_issues.py', 'r') as f:
            content = f.read()
            
        # Check if pgvector extension check is implemented
        if 'pg_extension WHERE extname = \'vector\'' in content:
            print("‚úÖ pgvector extension check implemented")
        else:
            print("‚ùå pgvector extension check not implemented")
            return False
            
        # Check if fallback table creation is implemented
        if 'embedding_vector TEXT' in content:
            print("‚úÖ fallback table creation implemented")
        else:
            print("‚ùå fallback table creation not implemented")
            return False
            
        # Check if both table creation paths exist
        if 'VECTOR(1536)' in content and 'TEXT, -- Store as JSON string' in content:
            print("‚úÖ both vector and text column types supported")
        else:
            print("‚ùå both vector and text column types not supported")
            return False
            
        print("‚úÖ Vector extension fix is properly implemented")
        return True
        
    except FileNotFoundError:
        print("‚ùå fix_startup_issues.py not found")
        return False

def test_pool_management_fix():
    """Test that the pool management bug is fixed"""
    print("üîß Testing Pool Management Fix...")
    
    try:
        with open('enhanced_startup_integration.py', 'r') as f:
            content = f.read()
            
        # Check if db_pool is properly initialized
        if 'db_pool = None' in content:
            print("‚úÖ db_pool properly initialized")
        else:
            print("‚ùå db_pool not properly initialized")
            return False
            
        # Check if pool is properly closed in finally block
        if 'finally:' in content and 'await db_pool.close()' in content:
            print("‚úÖ pool properly closed in finally block")
        else:
            print("‚ùå pool not properly closed in finally block")
            return False
            
        # Check if pool is checked before closing
        if 'if db_pool:' in content:
            print("‚úÖ pool properly checked before closing")
        else:
            print("‚ùå pool not properly checked before closing")
            return False
            
        print("‚úÖ Pool management fix is properly implemented")
        return True
        
    except FileNotFoundError:
        print("‚ùå enhanced_startup_integration.py not found")
        return False

def test_knowledge_seeding_vector_support():
    """Test that knowledge seeding handles both vector and text columns"""
    print("üîß Testing Knowledge Seeding Vector Support...")
    
    try:
        with open('knowledge_seeding_system.py', 'r') as f:
            content = f.read()
            
        # Check if vector support detection is implemented
        if 'data_type FROM information_schema.columns' in content:
            print("‚úÖ vector support detection implemented")
        else:
            print("‚ùå vector support detection not implemented")
            return False
            
        # Check if embedding format conversion is implemented
        if 'json.dumps(embedding)' in content:
            print("‚úÖ embedding format conversion implemented")
        else:
            print("‚ùå embedding format conversion not implemented")
            return False
            
        # Check if both vector and text handling exists
        if 'vector_support = column_type == \'USER-DEFINED\'' in content:
            print("‚úÖ vector type detection implemented")
        else:
            print("‚ùå vector type detection not implemented")
            return False
            
        print("‚úÖ Knowledge seeding vector support is properly implemented")
        return True
        
    except FileNotFoundError:
        print("‚ùå knowledge_seeding_system.py not found")
        return False

def test_error_handling_improvements():
    """Test that error handling has been improved"""
    print("üîß Testing Error Handling Improvements...")
    
    try:
        with open('knowledge_seeding_system.py', 'r') as f:
            content = f.read()
            
        # Check if AsyncPG availability is checked
        if 'ASYNCPG_AVAILABLE' in content:
            print("‚úÖ AsyncPG availability check implemented")
        else:
            print("‚ùå AsyncPG availability check not implemented")
            return False
            
        # Check if graceful fallback is implemented
        if 'AsyncPG not available, skipping knowledge seeding' in content:
            print("‚úÖ graceful fallback implemented")
        else:
            print("‚ùå graceful fallback not implemented")
            return False
            
        # Check if OpenAI errors are handled gracefully
        if 'OpenAI embedding failed' in content:
            print("‚úÖ OpenAI error handling implemented")
        else:
            print("‚ùå OpenAI error handling not implemented")
            return False
            
        print("‚úÖ Error handling improvements are properly implemented")
        return True
        
    except FileNotFoundError:
        print("‚ùå knowledge_seeding_system.py not found")
        return False

def main():
    """Run all bug fix tests"""
    print("üöÄ Testing JyotiFlow.ai Bug Fixes...")
    print("=" * 60)
    
    tests = [
        test_conditional_variable_usage_fix,
        test_vector_extension_fix,
        test_pool_management_fix,
        test_knowledge_seeding_vector_support,
        test_error_handling_improvements
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test failed with error: {e}")
        print()
    
    print("=" * 60)
    print(f"üìä Bug Fix Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All critical bugs have been fixed!")
        print("‚úÖ System is now robust and production-ready")
        return True
    else:
        print("‚ö†Ô∏è Some bugs still need attention")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)